Module Bookstore
{
	Entity Book
	{
		ShortString Code {AutoCode;}
		ShortString Title;
		Integer NumberOfPages;
		Reference Author Bookstore.Person;

        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

		ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
        {
            return query.Where(item => item.NumberOfPages >= 500);
        }';

		ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
        {
            var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
            return filtered;
        }';

		FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

		// Using a system type as a parameter.
        ComposableFilterBy 'System.String[]' '(query, repository, titles) =>
            {
                return query.Where(book => titles.Contains(book.Title));
            }';

        // Using an instance of an entity as a parameter.
        ComposableFilterBy 'Bookstore.Person' '(query, repository, author) =>
            {
                return query.Where(book => book.AuthorID == author.ID
                    || book.Author.Name == author.Name);
            }';

		ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
		InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

		ItemFilter ContainsLockMark 'book => book.Title.Contains("lock")';
		Lock ContainsLockMark '[Test] Name contains lock mark.';

		Logging;
	}

    Parameter LongBooks2
    {
    }

	Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

	Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }

		ItemFilter ImportantBookExplanation "item => item.Book.Title.Contains(""important"") && item.Explanation.Length < 50";
		InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

    }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating; // ComputedFrom Bookstore.ComputeBookRating
    }
	
	Entity Person{
		Deactivatable;
		ShortString Name;
	}

	Entity Comment{
		Reference Book {
			Detail;
		}
		LongString Text;
		DateTime Created {CreationTime;}
		DateTime Modified {ModificationTimeOf Bookstore.Comment.Text;}
	}

	Entity ChildrensBook{
		Extends Bookstore.Book;

		Integer AgeFrom;
		Integer AgeTo;
		IntegerRange AgeFrom AgeTo;
	}

	Entity ForeignBook{
		Extends Bookstore.Book;

		ShortString OriginalLanguage;
		Reference Translator Bookstore.Person;
	}

	Entity Topic{
		ShortString Name {Unique; Required;}
	}

	Entity BookTopic{
		Reference Book {Detail;}
		Reference Topic {Required;}

		UniqueMultiple 'Book Topic';
	}

	Browse BookGrid Bookstore.Book
	{
		Take Code;
		Take Title;
		Take 'Author.Name';
		Take TranslatorName 'Extension_ForeignBook.Translator.Name';
		Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
	}

	SqlQueryable BookInfo <SQL\BookInfo.sql>
	//"
	//	SELECT
	//		b.ID,
	//		NumberOfComments = COUNT(c.ID)
	//	FROM 
	//		Bookstore.Book b
	//		LEFT JOIN Bookstore.Comment c on c.BookID = b.ID
	//	GROUP BY 
	//		b.ID
	//"
	{
		Extends Bookstore.Book;
		Integer NumberOfComments;

		AutodetectSqlDependencies;
	}

	SqlQueryable BookTopicInfo <SQL\BookTopicInfo.sql>
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;
	}

	SqlView BookWithoutAuthors <SQL\BookWithoutAuthor.sql>
	{
		AutoDetectSqlDependencies;
	}

	SqlQueryable BookWithoutAuthorsInfo 
	"
		SELECT
			b.ID,
			b.Title
		FROM Bookstore.BookWithoutAuthors b
	"
	{
		Extends Bookstore.Book;
		ShortString Title;
	}


	Browse BookDetailsGrid Bookstore.Book{
		Take BookName 'Title';
		Take 'Author.Name';
		Take NumberOfTopic 'Extension_BookTopicInfo.NumberOfTopics';
	}

	Action InsertManyBooks
		'(parameter, repository, userInfo) =>
		{
			for (int i = 0; i < parameter.NumberOfBooks; i++)
			{
				var newBook = new Bookstore.Book { Code = "+++", Title = parameter.TitlePrefix };
				repository.Bookstore.Book.Insert(newBook);
			}
		}'
	{
		Integer NumberOfBooks;
		ShortString TitlePrefix;
	}

	Hardcoded Genre
	{
		ShortString Label;
		LongString Description;
		Bool IsFiction;

		Entry ScienceFiction
		{
			Value Label 'Science fiction';
			Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
			Value IsFiction 1;
		}

		Entry Biography
		{
			Value Label 'Biography';
			Value Description 'A written narrative of a person''s life.';
			Value IsFiction 0;
		}
	}
}

//Module Bookstore;
//Entity Bookstore.Book;
//AutoCode Bookstore.Book.Code;
//ShortString Bookstore.Book.Title;
//Integer Bookstore.Book.NumberOfPages;
//ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
//InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//Logging Bookstore.Book;
