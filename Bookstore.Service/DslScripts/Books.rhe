Module Bookstore
{
	Entity Book
	{
		ShortString Code {AutoCode;}
		ShortString Title;
		Integer NumberOfPages;
		Reference Author Bookstore.Person;

		ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
		InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

		ItemFilter ContainsLockMark 'book => book.Title.Contains("lock")';
		Lock ContainsLockMark '[Test] Name contains lock mark.';

		Logging;
	}
	
	Entity Person{
		Deactivatable;
		ShortString Name;
	}

	Entity Comment{
		Reference Book {
			Detail;
		}
		LongString Text;
		DateTime Created {CreationTime;}
		DateTime Modified {ModificationTimeOf Bookstore.Comment.Text;}
	}

	Entity ChildrensBook{
		Extends Bookstore.Book;

		Integer AgeFrom;
		Integer AgeTo;
		IntegerRange AgeFrom AgeTo;
	}

	Entity ForeignBook{
		Extends Bookstore.Book;

		ShortString OriginalLanguage;
		Reference Translator Bookstore.Person;
	}

	Entity Topic{
		ShortString Name {Unique; Required;}
	}

	Entity BookTopic{
		Reference Book {Detail;}
		Reference Topic {Required;}

		UniqueMultiple 'Book Topic';
	}

	Browse BookGrid Bookstore.Book
	{
		Take Code;
		Take Title;
		Take 'Author.Name';
		Take TranslatorName 'Extension_ForeignBook.Translator.Name';
		Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
	}

	SqlQueryable BookInfo <SQL\BookInfo.sql>
	//"
	//	SELECT
	//		b.ID,
	//		NumberOfComments = COUNT(c.ID)
	//	FROM 
	//		Bookstore.Book b
	//		LEFT JOIN Bookstore.Comment c on c.BookID = b.ID
	//	GROUP BY 
	//		b.ID
	//"
	{
		Extends Bookstore.Book;
		Integer NumberOfComments;

		AutodetectSqlDependencies;
	}

	SqlQueryable BookTopicInfo <SQL\BookTopicInfo.sql>
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;
	}

	Browse BookDetailsGrid Bookstore.Book{
		Take BookName 'Title';
		Take 'Author.Name';
		Take NumberOfTopic 'Extension_BookTopicInfo.NumberOfTopics';
	}

	Action InsertManyBooks
		'(parameter, repository, userInfo) =>
		{
			for (int i = 0; i < parameter.NumberOfBooks; i++)
			{
				var newBook = new Bookstore.Book { Code = "+++", Title = parameter.TitlePrefix };
				repository.Bookstore.Book.Insert(newBook);
			}
		}'
	{
		Integer NumberOfBooks;
		ShortString TitlePrefix;
	}

	Hardcoded Genre
	{
		ShortString Label;
		LongString Description;
		Bool IsFiction;

		Entry ScienceFiction
		{
			Value Label 'Science fiction';
			Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
			Value IsFiction 1;
		}

		Entry Biography
		{
			Value Label 'Biography';
			Value Description 'A written narrative of a person''s life.';
			Value IsFiction 0;
		}
	}
}

//Module Bookstore;
//Entity Bookstore.Book;
//ShortString Bookstore.Book.Code;
//ShortString Bookstore.Book.Title;
//Integer Bookstore.Book.NumberOfPages;
//ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
//InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
//Logging Bookstore.Book;
